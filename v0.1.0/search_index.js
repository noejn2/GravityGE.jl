var documenterSearchIndex = {"docs":
[{"location":"manual/examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"manual/examples/","page":"Examples","title":"Examples","text":"This page provides comprehensive examples of using GravityGE.jl for different types of trade analysis.","category":"page"},{"location":"manual/examples/#Basic-Trade-Analysis","page":"Examples","title":"Basic Trade Analysis","text":"","category":"section"},{"location":"manual/examples/#Simple-Two-Country-Model","page":"Examples","title":"Simple Two-Country Model","text":"","category":"section"},{"location":"manual/examples/","page":"Examples","title":"Examples","text":"using GravityGE\nusing DataFrames\n\n# Create bilateral trade data for USA and Canada\ntrade_data = DataFrame(\n    origin = [\"USA\", \"USA\", \"CAN\", \"CAN\"],\n    destination = [\"USA\", \"CAN\", \"USA\", \"CAN\"],\n    value = [500.0, 100.0, 80.0, 200.0]\n)\n\n# Run basic gravity GE analysis\nresult = gravityGE(trade_data; theta=4.0)\n\n# Examine results\nprintln(\"Welfare changes:\")\nprintln(result[:new_welfare])\n\nprintln(\"\\nWage changes:\")\nprintln(result[:new_wages])","category":"page"},{"location":"manual/examples/#Multi-Country-Analysis","page":"Examples","title":"Multi-Country Analysis","text":"","category":"section"},{"location":"manual/examples/","page":"Examples","title":"Examples","text":"# Create data for multiple countries\ncountries = [\"USA\", \"CAN\", \"MEX\", \"BRA\"]\nn_countries = length(countries)\n\n# Generate all bilateral pairs\norigins = repeat(countries, inner=n_countries)\ndestinations = repeat(countries, outer=n_countries)\n\n# Sample trade values (in practice, use real data)\ntrade_values = [\n    500.0, 100.0, 50.0, 30.0,   # USA exports\n    80.0,  200.0, 20.0, 15.0,   # CAN exports\n    40.0,  25.0,  150.0, 10.0,  # MEX exports\n    20.0,  12.0,  8.0,   100.0  # BRA exports\n]\n\nmulti_trade = DataFrame(\n    origin = origins,\n    destination = destinations,\n    value = trade_values\n)\n\n# Analyze multi-country trade\nresult = gravityGE(multi_trade; theta=5.0)","category":"page"},{"location":"manual/examples/#Productivity-Shock-Analysis","page":"Examples","title":"Productivity Shock Analysis","text":"","category":"section"},{"location":"manual/examples/#Uniform-Productivity-Increase","page":"Examples","title":"Uniform Productivity Increase","text":"","category":"section"},{"location":"manual/examples/","page":"Examples","title":"Examples","text":"# Add productivity shock column\ntrade_data.productivity = [1.1, 1.1, 1.1, 1.1]  # 10% increase for all\n\n# Run analysis with productivity shocks\nresult = gravityGE(trade_data; theta=4.0, a_hat_name=\"productivity\")\n\nprintln(\"Welfare effects of 10% productivity increase:\")\nprintln(result[:new_welfare])","category":"page"},{"location":"manual/examples/#Country-Specific-Productivity-Shocks","page":"Examples","title":"Country-Specific Productivity Shocks","text":"","category":"section"},{"location":"manual/examples/","page":"Examples","title":"Examples","text":"# Create data with country-specific shocks\ntrade_data = DataFrame(\n    origin = [\"USA\", \"USA\", \"CAN\", \"CAN\"],\n    destination = [\"USA\", \"CAN\", \"USA\", \"CAN\"],\n    value = [500.0, 100.0, 80.0, 200.0],\n    productivity = [1.2, 1.2, 0.9, 0.9]  # USA +20%, CAN -10%\n)\n\nresult = gravityGE(trade_data; theta=4.0, a_hat_name=\"productivity\")\n\nprintln(\"Asymmetric productivity shock effects:\")\nfor (i, country) in enumerate([\"USA\", \"CAN\"])\n    welfare = result[:new_welfare].welfare[i]\n    println(\"$country welfare change: $(round(welfare, digits=3))\")\nend","category":"page"},{"location":"manual/examples/#Trade-Cost-Shock-Analysis","page":"Examples","title":"Trade Cost Shock Analysis","text":"","category":"section"},{"location":"manual/examples/#Bilateral-Trade-Cost-Reduction","page":"Examples","title":"Bilateral Trade Cost Reduction","text":"","category":"section"},{"location":"manual/examples/","page":"Examples","title":"Examples","text":"# Create trade cost shock data\ntrade_data = DataFrame(\n    origin = [\"USA\", \"USA\", \"CAN\", \"CAN\"],\n    destination = [\"USA\", \"CAN\", \"USA\", \"CAN\"],\n    value = [500.0, 100.0, 80.0, 200.0],\n    trade_costs = [0.0, -0.2, -0.2, 0.0]  # 20% bilateral cost reduction\n)\n\nresult = gravityGE(trade_data; theta=4.0, beta_hat_name=\"trade_costs\")\n\nprintln(\"Effects of 20% bilateral trade cost reduction:\")\nprintln(result[:new_welfare])","category":"page"},{"location":"manual/examples/#Regional-Trade-Agreement-Simulation","page":"Examples","title":"Regional Trade Agreement Simulation","text":"","category":"section"},{"location":"manual/examples/","page":"Examples","title":"Examples","text":"# Simulate NAFTA-style agreement\ncountries = [\"USA\", \"CAN\", \"MEX\", \"BRA\"]\nn = length(countries)\n\n# Create full bilateral trade matrix\ntrade_matrix = DataFrame(\n    origin = repeat(countries, inner=n),\n    destination = repeat(countries, outer=n),\n    value = [500, 100, 50, 30,   # USA\n             80, 200, 20, 15,    # CAN\n             40, 25, 150, 10,    # MEX\n             20, 12, 8, 100]     # BRA\n)\n\n# NAFTA members get preferential treatment\nnafta_members = [\"USA\", \"CAN\", \"MEX\"]\ntrade_matrix.trade_costs = zeros(nrow(trade_matrix))\n\nfor i in 1:nrow(trade_matrix)\n    origin = trade_matrix.origin[i]\n    dest = trade_matrix.destination[i]\n\n    # Internal trade costs are always zero\n    if origin == dest\n        trade_matrix.trade_costs[i] = 0.0\n    # NAFTA members get 30% cost reduction\n    elseif origin in nafta_members && dest in nafta_members\n        trade_matrix.trade_costs[i] = -0.3\n    # Non-NAFTA trade unchanged\n    else\n        trade_matrix.trade_costs[i] = 0.0\n    end\nend\n\n# Analyze regional trade agreement\nresult = gravityGE(trade_matrix; theta=4.0, beta_hat_name=\"trade_costs\")\n\nprintln(\"NAFTA simulation welfare effects:\")\nfor (i, country) in enumerate(countries)\n    welfare = result[:new_welfare].welfare[i]\n    println(\"$country: $(round((welfare-1)*100, digits=1))%\")\nend","category":"page"},{"location":"manual/examples/#Advanced-Configuration","page":"Examples","title":"Advanced Configuration","text":"","category":"section"},{"location":"manual/examples/#Custom-Convergence-Settings","page":"Examples","title":"Custom Convergence Settings","text":"","category":"section"},{"location":"manual/examples/","page":"Examples","title":"Examples","text":"# Use stricter convergence criteria\nresult = gravityGE(\n    trade_data;\n    theta=4.0,\n    tol=1e-10,          # Tighter tolerance\n    max_iter=5000,      # More iterations allowed\n    multiplicative=false # Additive deficits\n)\n\n# Check convergence\nif haskey(result, :iterations)\n    println(\"Converged in $(result[:iterations]) iterations\")\nend","category":"page"},{"location":"manual/examples/#Sensitivity-Analysis","page":"Examples","title":"Sensitivity Analysis","text":"","category":"section"},{"location":"manual/examples/","page":"Examples","title":"Examples","text":"# Test different theta values\ntheta_values = [2.0, 4.0, 6.0, 8.0]\nwelfare_sensitivity = Dict()\n\nfor theta in theta_values\n    result = gravityGE(trade_data; theta=theta)\n    welfare_sensitivity[theta] = result[:new_welfare].welfare\nend\n\nprintln(\"Welfare sensitivity to theta:\")\nfor (theta, welfare) in welfare_sensitivity\n    avg_welfare = mean(welfare)\n    println(\"Î¸ = $theta: Average welfare = $(round(avg_welfare, digits=3))\")\nend","category":"page"},{"location":"manual/examples/#Working-with-Real-Data","page":"Examples","title":"Working with Real Data","text":"","category":"section"},{"location":"manual/examples/#Loading-and-Cleaning-Data","page":"Examples","title":"Loading and Cleaning Data","text":"","category":"section"},{"location":"manual/examples/","page":"Examples","title":"Examples","text":"using CSV\n\n# Load real trade data\nraw_data = CSV.read(\"bilateral_trade.csv\", DataFrame)\n\n# Clean the data\nclean_data = dropmissing(raw_data, [:origin, :destination, :value])\nclean_data = clean_data[clean_data.value .> 0, :]\n\n# Ensure all countries have internal trade\ncountries = unique(vcat(clean_data.origin, clean_data.destination))\ninternal_trade = DataFrame(\n    origin = countries,\n    destination = countries,\n    value = fill(1000.0, length(countries))  # Placeholder values\n)\n\n# Combine external and internal trade\nfull_data = vcat(clean_data, internal_trade)\nfull_data = unique(full_data, [:origin, :destination])\n\n# Create TradeData object\ntd = TradeData(full_data)\nprintln(\"Analysis ready for $(td.N) countries\")","category":"page"},{"location":"manual/examples/#Batch-Analysis","page":"Examples","title":"Batch Analysis","text":"","category":"section"},{"location":"manual/examples/","page":"Examples","title":"Examples","text":"# Analyze multiple scenarios\nscenarios = [\n    (\"Baseline\", Dict()),\n    (\"High Elasticity\", Dict(:theta => 8.0)),\n    (\"Low Elasticity\", Dict(:theta => 2.0)),\n    (\"Multiplicative\", Dict(:multiplicative => true))\n]\n\nresults = Dict()\n\nfor (name, params) in scenarios\n    println(\"Running scenario: $name\")\n    result = gravityGE(trade_data; params...)\n    results[name] = result[:new_welfare].welfare\nend\n\n# Compare results\nprintln(\"\\nScenario comparison (average welfare):\")\nfor (name, welfare) in results\n    avg = mean(welfare)\n    println(\"$name: $(round(avg, digits=3))\")\nend","category":"page"},{"location":"manual/understanding/#Understanding-input-and-outputs","page":"Understanding input/output","title":"Understanding input and outputs","text":"","category":"section"},{"location":"manual/understanding/","page":"Understanding input/output","title":"Understanding input/output","text":"This guide will help you get started with GravityGE.jl for analyzing bilateral trade flows using gravity models with general equilibrium effects.","category":"page"},{"location":"manual/understanding/#Key-Parameters","page":"Understanding input/output","title":"Key Parameters","text":"","category":"section"},{"location":"manual/understanding/","page":"Understanding input/output","title":"Understanding input/output","text":"theta: Trade elasticity parameter (higher values = more substitutable goods)\ntol: Convergence tolerance (default: 1e-6)\nmax_iter: Maximum iterations (default: 1000)\nmultiplicative: Whether to use multiplicative deficits (default: false)","category":"page"},{"location":"manual/understanding/#Understanding-Results","page":"Understanding input/output","title":"Understanding Results","text":"","category":"section"},{"location":"manual/understanding/","page":"Understanding input/output","title":"Understanding input/output","text":"The gravityGE function returns a dictionary with:","category":"page"},{"location":"manual/understanding/","page":"Understanding input/output","title":"Understanding input/output","text":":new_welfare: Welfare changes by region\n:new_wages: Wage changes (normalized)\n:new_prices: Price index changes\n:new_trade_flows: Updated bilateral trade flows","category":"page"},{"location":"api/types/#Data-Types","page":"Data Types","title":"Data Types","text":"","category":"section"},{"location":"api/types/","page":"Data Types","title":"Data Types","text":"This page documents the data types and structures used in GravityGE.jl.","category":"page"},{"location":"api/types/#All-Data-Types","page":"Data Types","title":"All Data Types","text":"","category":"section"},{"location":"api/types/","page":"Data Types","title":"Data Types","text":"Complete documentation of all data types defined in the package.","category":"page"},{"location":"api/types/#GravityGE.TradeData","page":"Data Types","title":"GravityGE.TradeData","text":"Documentation for TradeData struct\n\n\n\n\n\n","category":"type"},{"location":"api/utilities/#Utilities","page":"Utilities","title":"Utilities","text":"","category":"section"},{"location":"api/utilities/","page":"Utilities","title":"Utilities","text":"This page documents utility functions and helper methods in GravityGE.jl.","category":"page"},{"location":"api/utilities/#All-Utility-Functions","page":"Utilities","title":"All Utility Functions","text":"","category":"section"},{"location":"api/utilities/","page":"Utilities","title":"Utilities","text":"Helper functions for data initialization and validation.","category":"page"},{"location":"manual/data-structures/#Data-Structures","page":"Data Structures","title":"Data Structures","text":"","category":"section"},{"location":"manual/data-structures/","page":"Data Structures","title":"Data Structures","text":"GravityGE.jl uses structured data validation to ensure your trade data meets the requirements for gravity model analysis.","category":"page"},{"location":"manual/data-structures/#TradeData-Structure","page":"Data Structures","title":"TradeData Structure","text":"","category":"section"},{"location":"manual/data-structures/","page":"Data Structures","title":"Data Structures","text":"The TradeData struct is the core data container that validates and stores your trade flow information.","category":"page"},{"location":"manual/data-structures/#Required-Columns","page":"Data Structures","title":"Required Columns","text":"","category":"section"},{"location":"manual/data-structures/","page":"Data Structures","title":"Data Structures","text":"Your DataFrame must contain these columns (case-insensitive):","category":"page"},{"location":"manual/data-structures/","page":"Data Structures","title":"Data Structures","text":"Column Type Description\norigin String Origin country/region identifier\ndestination String Destination country/region identifier\nvalue Numeric Trade flow value (must be positive)","category":"page"},{"location":"manual/data-structures/#Optional-Shock-Columns","page":"Data Structures","title":"Optional Shock Columns","text":"","category":"section"},{"location":"manual/data-structures/","page":"Data Structures","title":"Data Structures","text":"You can include additional columns for counterfactual analysis:","category":"page"},{"location":"manual/data-structures/","page":"Data Structures","title":"Data Structures","text":"Column Type Description Constraints\na_hat Numeric Productivity shocks Must be non-zero\nbeta_hat Numeric Trade cost shocks Must be zero for internal flows","category":"page"},{"location":"manual/data-structures/#Data-Validation-Rules","page":"Data Structures","title":"Data Validation Rules","text":"","category":"section"},{"location":"manual/data-structures/#Basic-Structure","page":"Data Structures","title":"Basic Structure","text":"","category":"section"},{"location":"manual/data-structures/","page":"Data Structures","title":"Data Structures","text":"No duplicate origin-destination pairs\nAll trade values must be positive and finite\nNo missing values in required columns","category":"page"},{"location":"manual/data-structures/#Internal-Trade-Flows","page":"Data Structures","title":"Internal Trade Flows","text":"","category":"section"},{"location":"manual/data-structures/","page":"Data Structures","title":"Data Structures","text":"Flows where origin == destination must be positive\nThese represent internal/domestic trade within regions","category":"page"},{"location":"manual/data-structures/#Productivity-Shocks-(a_hat)","page":"Data Structures","title":"Productivity Shocks (a_hat)","text":"","category":"section"},{"location":"manual/data-structures/","page":"Data Structures","title":"Data Structures","text":"All values must be non-zero (no division by zero)\nPositive values indicate productivity increases\nValues < 1 indicate productivity decreases","category":"page"},{"location":"manual/data-structures/#Trade-Cost-Shocks-(beta_hat)","page":"Data Structures","title":"Trade Cost Shocks (beta_hat)","text":"","category":"section"},{"location":"manual/data-structures/","page":"Data Structures","title":"Data Structures","text":"Diagonal elements (internal flows) must be zero\nNegative values indicate trade cost reductions\nPositive values indicate trade cost increases","category":"page"},{"location":"manual/data-structures/#Creating-TradeData-Objects","page":"Data Structures","title":"Creating TradeData Objects","text":"","category":"section"},{"location":"manual/data-structures/","page":"Data Structures","title":"Data Structures","text":"# Basic usage\ntd = TradeData(your_dataframe)\n\n# With productivity shocks\ntd = TradeData(your_dataframe; a_hat_name=\"productivity\")\n\n# With trade cost shocks\ntd = TradeData(your_dataframe; beta_hat_name=\"trade_costs\")\n\n# With both types of shocks\ntd = TradeData(your_dataframe;\n               a_hat_name=\"productivity\",\n               beta_hat_name=\"trade_costs\")","category":"page"},{"location":"manual/data-structures/#Accessing-Properties","page":"Data Structures","title":"Accessing Properties","text":"","category":"section"},{"location":"manual/data-structures/","page":"Data Structures","title":"Data Structures","text":"The TradeData struct provides convenient properties:","category":"page"},{"location":"manual/data-structures/","page":"Data Structures","title":"Data Structures","text":"td = TradeData(your_data)\n\n# Number of regions\nprintln(\"Regions: \", td.N)\n\n# Access underlying DataFrame\ndata = td.df\n\n# Get matrices for calculations\nones_vec = td.ones_vector  # NÃ1 vector of ones\nones_mat = td.ones_matrix  # NÃN matrix of ones","category":"page"},{"location":"manual/data-structures/#Example-Data-Structure","page":"Data Structures","title":"Example Data Structure","text":"","category":"section"},{"location":"manual/data-structures/","page":"Data Structures","title":"Data Structures","text":"# Well-formatted trade data\ntrade_data = DataFrame(\n    origin = [\"USA\", \"USA\", \"CAN\", \"CAN\", \"MEX\", \"MEX\"],\n    destination = [\"USA\", \"CAN\", \"USA\", \"CAN\", \"USA\", \"CAN\"],\n    value = [500.0, 100.0, 80.0, 200.0, 50.0, 30.0],\n    productivity = [1.0, 1.1, 0.9, 1.05, 1.2, 0.95],\n    trade_costs = [0.0, -0.1, -0.05, 0.0, -0.15, -0.08]\n)\n\n# Create validated TradeData object\ntd = TradeData(trade_data;\n               a_hat_name=\"productivity\",\n               beta_hat_name=\"trade_costs\")","category":"page"},{"location":"manual/data-structures/#Common-Data-Issues","page":"Data Structures","title":"Common Data Issues","text":"","category":"section"},{"location":"manual/data-structures/#Duplicate-Pairs","page":"Data Structures","title":"Duplicate Pairs","text":"","category":"section"},{"location":"manual/data-structures/","page":"Data Structures","title":"Data Structures","text":"# â This will fail - duplicate USAâCAN\nbad_data = DataFrame(\n    origin = [\"USA\", \"USA\", \"USA\"],\n    destination = [\"CAN\", \"CAN\", \"MEX\"],\n    value = [100.0, 50.0, 75.0]\n)","category":"page"},{"location":"manual/data-structures/#Missing-Internal-Trade","page":"Data Structures","title":"Missing Internal Trade","text":"","category":"section"},{"location":"manual/data-structures/","page":"Data Structures","title":"Data Structures","text":"# â This will fail - missing USAâUSA flow\nincomplete_data = DataFrame(\n    origin = [\"USA\", \"CAN\"],\n    destination = [\"CAN\", \"USA\"],\n    value = [100.0, 50.0]\n)","category":"page"},{"location":"manual/data-structures/#Invalid-Trade-Costs","page":"Data Structures","title":"Invalid Trade Costs","text":"","category":"section"},{"location":"manual/data-structures/","page":"Data Structures","title":"Data Structures","text":"# â This will fail - non-zero internal trade cost\ninvalid_costs = DataFrame(\n    origin = [\"USA\", \"USA\"],\n    destination = [\"USA\", \"CAN\"],\n    value = [100.0, 50.0],\n    trade_costs = [-0.1, -0.05]  # Internal flow should be 0.0\n)","category":"page"},{"location":"#GravityGE.jl","page":"Home","title":"GravityGE.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Julia package for gravity models in international trade with general equilibrium effects.","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GravityGE.jl implements gravity models for analyzing bilateral trade flows with general equilibrium effects. The package provides tools for:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Bilateral Trade Analysis: Analyze trade flows between countries/regions\nGeneral Equilibrium Effects: Account for wage and price adjustments\nCounterfactual Analysis: Simulate productivity and trade cost shocks\nWelfare Analysis: Compute welfare effects of trade policy changes","category":"page"},{"location":"#Key-Features","page":"Home","title":"Key Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Validated Data Structures: Comprehensive validation of trade flow data\nFlexible Shock Analysis: Support for productivity (a_hat) and trade cost (beta_hat) shocks\nConvergence Guarantees: Robust numerical methods with configurable tolerance\nPolicy Simulation: Tools for analyzing trade agreements and policy reforms","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(url=\"https://github.com/noejn2/GravityGE.jl\")","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using GravityGE\nusing DataFrames\n\n# Create bilateral trade data\ntrade_data = DataFrame(\n    origin = [\"USA\", \"USA\", \"CAN\", \"CAN\"],\n    destination = [\"USA\", \"CAN\", \"USA\", \"CAN\"],\n    value = [500.0, 100.0, 80.0, 200.0]\n)\n\n# Run gravity GE analysis\ntheta_value=4.0 # Trade elasticity assumed to be 4.0\nresult = gravityGE(trade_data; theta=theta_value)\n\n# Access welfare effects (all ones since no simulation shocked is assumed)\nprintln(\"Welfare changes: \", result[:new_welfare])\n\n# Run gravity GE analysis assuming trade costs between USA and CAN increased by 50%\ntrade_data.bitrade .= -1*theta_value*log(1.5)\ntrade.bitrade[trade.origin == trade.destination ] .= 0\nresult = gravityGE(trade_data; theta=theta_value, beta_hat_name=\"bitrade\")\nprintln(\"Welfare changes: \", result[:new_welfare])\n\n# Run gravity GE analysis assuming trade costs between USA and CAN increased by 50% and productivity in the USA and CAN falls\ntrade_data.prod = 0.5\nresult = gravityGE(trade_data; theta=theta_value, beta_hat_name=\"bitrade\", a_hat_name=\"prod\")\nprintln(\"Welfare changes: \", result[:new_welfare])\n\n\n","category":"page"},{"location":"#Package-Structure","page":"Home","title":"Package Structure","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package is organized around several key components:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"manual/getting-started.md\",\n    \"manual/data-structures.md\",\n    \"manual/examples.md\",\n    \"api/functions.md\",\n    \"api/types.md\",\n    \"api/utilities.md\"\n]\nDepth = 2","category":"page"},{"location":"#Citation","page":"Home","title":"Citation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use GravityGE.jl in your research, please cite:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@software{gravityge_jl,\n  author = {Nava, NoÃ© J.},\n  title = {GravityGE.jl: A Julia Package for Gravity Models with General Equilibrium Effects},\n  url = {https://github.com/noejn2/GravityGE.jl},\n  version = {0.1.0},\n  year = {2025}\n}","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is licensed under the MIT License.","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Contributions are welcome! Please open an issue or submit a pull request.","category":"page"},{"location":"#Related-Packages","page":"Home","title":"Related Packages","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DataFrames.jl - Data manipulation\nLinearAlgebra.jl - Linear algebra operations\nStatistics.jl - Statistical functions","category":"page"},{"location":"api/functions/#Main-Functions","page":"Main Function","title":"Main Functions","text":"","category":"section"},{"location":"api/functions/","page":"Main Function","title":"Main Function","text":"This page documents the main functions available in GravityGE.jl.","category":"page"},{"location":"api/functions/#All-Main-Functions","page":"Main Function","title":"All Main Functions","text":"","category":"section"},{"location":"api/functions/","page":"Main Function","title":"Main Function","text":"The core gravity model implementation with general equilibrium effects.","category":"page"},{"location":"api/functions/#GravityGE.gravityGE-Tuple{DataFrames.DataFrame}","page":"Main Function","title":"GravityGE.gravityGE","text":"gravityGE(\n    trade_data::DataFrame;\n    theta=4.0,\n    beta_hat_name=nothing,\n    a_hat_name=nothing,\n    multiplicative=false,\n    tol = 1e-8,\n    max_iter = 1_000_000,\n    crit = 1.0\n)\n\nSolve a one-sector Armington-CES gravity model with general equilibrium closure.\n\nArguments\n\ntrade_data::DataFrame: A DataFrame containing trade flows and (optionally) trade frictions and productivity. It must contain the columns \"orig\", \"dest\", and \"flow\".\ntheta::Float64=4.0: Trade elasticity parameter.\nbeta_hat_name::Union{Nothing,String}: (Optional) Column name for bilateral trade frictions in log form. Should be zero on the diagonal.\na_hat_name::Union{Nothing,String}: (Optional) Column name for log productivity. Must be positive and match regions along the diagonal.\nmultiplicative::Bool=false: If true, assumes a multiplicative GE closure; otherwise, uses an additive closure.\ntol::Float64=1e-8: Convergence tolerance.\nmax_iter::Int=1_000_000: Maximum number of iterations for convergence\ncrit::Float64=1.0: Initial convergence criterion.\n\nReturns\n\nA Dict with two elements:\n\n:new_trade â a DataFrame with updated bilateral trade flows.\n:new_welfare â a DataFrame with welfare, nominal wages, and price indexes by region.\n\nExample:\n\n`julia using DataFrames, GravityGE\n\nflows = DataFrame(         orig=repeat(string.('A':'Z'), inner=26),         dest=repeat(string.('A':'Z'), outer=26),         flow=ones(26^2)     )\n\n# No change: additive\nout = gravityGE(flows; theta=4.0)\n\n`\n\n\n\n\n\n","category":"method"}]
}
